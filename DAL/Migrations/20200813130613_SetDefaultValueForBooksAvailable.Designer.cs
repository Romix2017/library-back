// <auto-generated />
using System;
using DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20200813130613_SetDefaultValueForBooksAvailable")]
    partial class SetDefaultValueForBooksAvailable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Notation")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("PublishingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("GenresId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DAL.Models.BooksHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateGiven")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BooksId");

                    b.HasIndex("UsersId");

                    b.ToTable("BooksHistory");
                });

            modelBuilder.Entity("DAL.Models.Genres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("DAL.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Superuser"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("DAL.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Superuser",
                            LastName = "Superuser",
                            PasswordHash = new byte[] { 253, 161, 11, 243, 119, 128, 126, 160, 5, 30, 102, 38, 65, 188, 20, 124, 13, 132, 252, 134, 154, 19, 41, 209, 41, 245, 205, 190, 210, 100, 10, 194, 217, 51, 50, 28, 18, 212, 137, 135, 149, 254, 59, 128, 140, 146, 75, 107, 224, 220, 115, 155, 171, 184, 174, 0, 140, 9, 145, 178, 10, 234, 177, 98 },
                            PasswordSalt = new byte[] { 29, 179, 43, 117, 150, 213, 20, 148, 88, 31, 208, 175, 217, 118, 198, 53, 137, 246, 147, 155, 234, 195, 13, 242, 133, 104, 96, 220, 166, 224, 57, 140, 100, 184, 133, 166, 178, 169, 92, 126, 116, 29, 54, 22, 165, 212, 214, 223, 6, 205, 28, 30, 205, 81, 48, 60, 66, 92, 56, 244, 58, 246, 66, 128, 236, 197, 31, 13, 232, 94, 102, 231, 41, 213, 117, 245, 71, 48, 26, 111, 26, 34, 250, 72, 217, 17, 236, 75, 50, 59, 203, 52, 174, 170, 172, 4, 115, 85, 18, 76, 90, 211, 15, 136, 162, 71, 151, 113, 177, 112, 16, 234, 88, 59, 26, 170, 28, 28, 112, 147, 43, 146, 38, 244, 155, 82, 238, 224 },
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolesId = 1,
                            UserName = "Superuser"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "User",
                            LastName = "User",
                            PasswordHash = new byte[] { 253, 161, 11, 243, 119, 128, 126, 160, 5, 30, 102, 38, 65, 188, 20, 124, 13, 132, 252, 134, 154, 19, 41, 209, 41, 245, 205, 190, 210, 100, 10, 194, 217, 51, 50, 28, 18, 212, 137, 135, 149, 254, 59, 128, 140, 146, 75, 107, 224, 220, 115, 155, 171, 184, 174, 0, 140, 9, 145, 178, 10, 234, 177, 98 },
                            PasswordSalt = new byte[] { 29, 179, 43, 117, 150, 213, 20, 148, 88, 31, 208, 175, 217, 118, 198, 53, 137, 246, 147, 155, 234, 195, 13, 242, 133, 104, 96, 220, 166, 224, 57, 140, 100, 184, 133, 166, 178, 169, 92, 126, 116, 29, 54, 22, 165, 212, 214, 223, 6, 205, 28, 30, 205, 81, 48, 60, 66, 92, 56, 244, 58, 246, 66, 128, 236, 197, 31, 13, 232, 94, 102, 231, 41, 213, 117, 245, 71, 48, 26, 111, 26, 34, 250, 72, 217, 17, 236, 75, 50, 59, 203, 52, 174, 170, 172, 4, 115, 85, 18, 76, 90, 211, 15, 136, 162, 71, 151, 113, 177, 112, 16, 234, 88, 59, 26, 170, 28, 28, 112, 147, 43, 146, 38, 244, 155, 82, 238, 224 },
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolesId = 2,
                            UserName = "User"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 253, 161, 11, 243, 119, 128, 126, 160, 5, 30, 102, 38, 65, 188, 20, 124, 13, 132, 252, 134, 154, 19, 41, 209, 41, 245, 205, 190, 210, 100, 10, 194, 217, 51, 50, 28, 18, 212, 137, 135, 149, 254, 59, 128, 140, 146, 75, 107, 224, 220, 115, 155, 171, 184, 174, 0, 140, 9, 145, 178, 10, 234, 177, 98 },
                            PasswordSalt = new byte[] { 29, 179, 43, 117, 150, 213, 20, 148, 88, 31, 208, 175, 217, 118, 198, 53, 137, 246, 147, 155, 234, 195, 13, 242, 133, 104, 96, 220, 166, 224, 57, 140, 100, 184, 133, 166, 178, 169, 92, 126, 116, 29, 54, 22, 165, 212, 214, 223, 6, 205, 28, 30, 205, 81, 48, 60, 66, 92, 56, 244, 58, 246, 66, 128, 236, 197, 31, 13, 232, 94, 102, 231, 41, 213, 117, 245, 71, 48, 26, 111, 26, 34, 250, 72, 217, 17, 236, 75, 50, 59, 203, 52, 174, 170, 172, 4, 115, 85, 18, 76, 90, 211, 15, 136, 162, 71, 151, 113, 177, 112, 16, 234, 88, 59, 26, 170, 28, 28, 112, 147, 43, 146, 38, 244, 155, 82, 238, 224 },
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolesId = 3,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("DAL.Models.Books", b =>
                {
                    b.HasOne("DAL.Models.Genres", "Genres")
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.BooksHistory", b =>
                {
                    b.HasOne("DAL.Models.Books", "Books")
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Users", b =>
                {
                    b.HasOne("DAL.Models.Roles", "Roles")
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
