// <auto-generated />
using System;
using DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20200813121344_AddIsAvailableField")]
    partial class AddIsAvailableField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Notation")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("PublishingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GenresId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DAL.Models.BooksHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateGiven")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BooksId");

                    b.HasIndex("UsersId");

                    b.ToTable("BooksHistory");
                });

            modelBuilder.Entity("DAL.Models.Genres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("DAL.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Superuser"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("DAL.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Superuser",
                            LastName = "Superuser",
                            PasswordHash = new byte[] { 252, 81, 39, 164, 167, 43, 73, 122, 19, 38, 7, 0, 36, 65, 82, 246, 189, 71, 190, 10, 51, 24, 15, 121, 32, 221, 243, 234, 136, 128, 116, 123, 111, 220, 108, 99, 78, 226, 245, 191, 120, 156, 48, 141, 195, 77, 219, 116, 229, 130, 33, 149, 133, 92, 201, 184, 207, 41, 162, 174, 61, 58, 49, 129 },
                            PasswordSalt = new byte[] { 56, 147, 193, 213, 134, 94, 5, 211, 109, 164, 253, 173, 73, 211, 55, 170, 57, 177, 194, 146, 218, 0, 236, 174, 130, 246, 130, 139, 166, 0, 207, 28, 165, 73, 217, 245, 203, 229, 84, 180, 222, 132, 148, 95, 183, 74, 161, 224, 106, 36, 158, 199, 196, 198, 143, 209, 138, 167, 239, 207, 34, 230, 200, 190, 223, 108, 201, 99, 140, 56, 239, 44, 15, 17, 17, 227, 173, 217, 220, 136, 228, 190, 195, 114, 128, 51, 123, 14, 194, 186, 232, 227, 65, 234, 72, 190, 151, 200, 199, 235, 104, 48, 77, 234, 134, 59, 251, 233, 107, 13, 57, 161, 72, 121, 189, 93, 141, 150, 53, 102, 105, 39, 151, 124, 191, 185, 156, 100 },
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolesId = 1,
                            UserName = "Superuser"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "User",
                            LastName = "User",
                            PasswordHash = new byte[] { 252, 81, 39, 164, 167, 43, 73, 122, 19, 38, 7, 0, 36, 65, 82, 246, 189, 71, 190, 10, 51, 24, 15, 121, 32, 221, 243, 234, 136, 128, 116, 123, 111, 220, 108, 99, 78, 226, 245, 191, 120, 156, 48, 141, 195, 77, 219, 116, 229, 130, 33, 149, 133, 92, 201, 184, 207, 41, 162, 174, 61, 58, 49, 129 },
                            PasswordSalt = new byte[] { 56, 147, 193, 213, 134, 94, 5, 211, 109, 164, 253, 173, 73, 211, 55, 170, 57, 177, 194, 146, 218, 0, 236, 174, 130, 246, 130, 139, 166, 0, 207, 28, 165, 73, 217, 245, 203, 229, 84, 180, 222, 132, 148, 95, 183, 74, 161, 224, 106, 36, 158, 199, 196, 198, 143, 209, 138, 167, 239, 207, 34, 230, 200, 190, 223, 108, 201, 99, 140, 56, 239, 44, 15, 17, 17, 227, 173, 217, 220, 136, 228, 190, 195, 114, 128, 51, 123, 14, 194, 186, 232, 227, 65, 234, 72, 190, 151, 200, 199, 235, 104, 48, 77, 234, 134, 59, 251, 233, 107, 13, 57, 161, 72, 121, 189, 93, 141, 150, 53, 102, 105, 39, 151, 124, 191, 185, 156, 100 },
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolesId = 2,
                            UserName = "User"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 252, 81, 39, 164, 167, 43, 73, 122, 19, 38, 7, 0, 36, 65, 82, 246, 189, 71, 190, 10, 51, 24, 15, 121, 32, 221, 243, 234, 136, 128, 116, 123, 111, 220, 108, 99, 78, 226, 245, 191, 120, 156, 48, 141, 195, 77, 219, 116, 229, 130, 33, 149, 133, 92, 201, 184, 207, 41, 162, 174, 61, 58, 49, 129 },
                            PasswordSalt = new byte[] { 56, 147, 193, 213, 134, 94, 5, 211, 109, 164, 253, 173, 73, 211, 55, 170, 57, 177, 194, 146, 218, 0, 236, 174, 130, 246, 130, 139, 166, 0, 207, 28, 165, 73, 217, 245, 203, 229, 84, 180, 222, 132, 148, 95, 183, 74, 161, 224, 106, 36, 158, 199, 196, 198, 143, 209, 138, 167, 239, 207, 34, 230, 200, 190, 223, 108, 201, 99, 140, 56, 239, 44, 15, 17, 17, 227, 173, 217, 220, 136, 228, 190, 195, 114, 128, 51, 123, 14, 194, 186, 232, 227, 65, 234, 72, 190, 151, 200, 199, 235, 104, 48, 77, 234, 134, 59, 251, 233, 107, 13, 57, 161, 72, 121, 189, 93, 141, 150, 53, 102, 105, 39, 151, 124, 191, 185, 156, 100 },
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolesId = 3,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("DAL.Models.Books", b =>
                {
                    b.HasOne("DAL.Models.Genres", "Genres")
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.BooksHistory", b =>
                {
                    b.HasOne("DAL.Models.Books", "Books")
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Users", b =>
                {
                    b.HasOne("DAL.Models.Roles", "Roles")
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
